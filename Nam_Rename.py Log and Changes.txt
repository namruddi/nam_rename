mixSC

Нужно написать скрипт на пайтон который позволит переименовать файлы в данной папке по желанию, а именно: при запуске скрипта откроется окошко, сверху title "Переименование" именно и 
снизу поле куда можно будет ввести расположение папки где находятся файлы либо выбор самого файла. Либо рядом будет кнопка "Обзор" нажав который я смогу выбрать файл на пк сам.
После того как будут выбраны файлы либо папка, снизу будет меню с выбором типа файлов, то есть "Фото (jpeg, jpg, png)" "Видео (mp4, mov, avi)" "Архив (zip, rar, 7z)" "GIF" "Папка" либо "Все"
После снизу будут ещё поля с меню, где и я смогу переименовать файлы быстро выберая шаблонные текста. сначала будет выбор, оставить оригинальное название или написать свой, если свой, то я
впишу своё. После пойдёт поле, где я смогу выбрать между текстом "SS" (пусть наводя на данную строку появится подсказка, что это означает, а тут именно Screenshot), "video" (Видео), "photo" (Фотографии),
после пойдёт поле где будут такие варианты как "NSC (No Sensitive Content)", "SC (Sensitive Content)", "LSC (Low Sensitive Content)", "VSC (Very Sensitive Content)", после пойдёт поле с part, то есть тут надо
давать номера файлам таким образом, чтобы была сортировка от 1 до того числа, сколько файлов было выбрано или находилось в папке, например p1, p2, p3, ... p13, и тд. После пойдёт поле с количеством внутри, то есть
надо будет выбрать количество файлов внутри, то есть надо просто вписать самому число в поле и после ты добавишь букву "p", как piece, но сокращенно.
Потом надо написать дату , но таким образом ddmmyy, то есть 311224. В итоге нужно что бы выглядело так: Naruto_SS_NSC_p3_100p_311224, либо TestFile_video_LSC_p1_55p_311224
Примечание: пиши поля через нижнюю чёрточку, если невозможно то через точки. Также в окошке округляй углы, используй более тёмные тона в цветах, при наведении добавь другой цвет, то есть modern design


*//  Первый вариант

import os
import tkinter as tk
from tkinter import ttk, filedialog, messagebox
from datetime import datetime

def browse_folder():
    folder_path.set(filedialog.askdirectory(title="Выберите папку"))

def browse_file():
    folder_path.set(filedialog.askopenfilename(title="Выберите файл"))

def rename_files():
    path = folder_path.get()
    if not os.path.exists(path):
        messagebox.showerror("Ошибка", "Указанный путь не существует")
        return

    # Сбор данных
    file_type = file_type_var.get()
    custom_name = custom_name_var.get()
    prefix = prefix_var.get()
    sensitivity = sensitivity_var.get()
    pieces = pieces_var.get()
    date = datetime.now().strftime("%d%m%y")

    try:
        files = []
        if os.path.isdir(path):
            files = os.listdir(path)
        else:
            files = [os.path.basename(path)]
            path = os.path.dirname(path)

        # Фильтрация по типу
        extensions = {
            "Фото": ["jpeg", "jpg", "png"],
            "Видео": ["mp4", "mov", "avi"],
            "Архив": ["zip", "rar", "7z"],
            "GIF": ["gif"],
            "Папка": []
        }.get(file_type, [])

        if extensions:
            files = [f for f in files if f.split('.')[-1].lower() in extensions]

        # Переименование
        for index, file in enumerate(files, start=1):
            ext = file.split('.')[-1]
            if file_type == "Папка" and not os.path.isdir(os.path.join(path, file)):
                continue
            
            new_name = f"{custom_name}_{prefix}_{sensitivity}_p{index}_{pieces}p_{date}.{ext}"
            os.rename(os.path.join(path, file), os.path.join(path, new_name))

        messagebox.showinfo("Успех", f"Переименование файлов завершено ({len(files)} файлов)")
    except Exception as e:
        messagebox.showerror("Ошибка", str(e))

# Создание окна
root = tk.Tk()
root.title("Переименование")
root.geometry("600x400")
root.configure(bg="#2C2F33")

folder_path = tk.StringVar()
custom_name_var = tk.StringVar(value="MyFile")
prefix_var = tk.StringVar(value="SS")
sensitivity_var = tk.StringVar(value="NSC")
pieces_var = tk.StringVar(value="1")
file_type_var = tk.StringVar(value="Все")

# Заголовок
title_label = tk.Label(root, text="Переименование", bg="#2C2F33", fg="#FFFFFF", font=("Arial", 16))
title_label.pack(pady=10)

# Поле для выбора файла/папки
frame_path = tk.Frame(root, bg="#2C2F33")
frame_path.pack(pady=10, fill="x", padx=20)

tk.Entry(frame_path, textvariable=folder_path, width=40).pack(side="left", padx=5)

tk.Button(frame_path, text="Обзор", command=browse_folder, bg="#7289DA", fg="#FFFFFF", relief="flat").pack(side="left", padx=5)

# Меню выбора типа файлов
file_type_label = tk.Label(root, text="Тип файлов", bg="#2C2F33", fg="#FFFFFF", font=("Arial", 12))
file_type_label.pack(pady=5)

file_type_menu = ttk.Combobox(root, textvariable=file_type_var, values=["Все", "Фото", "Видео", "Архив", "GIF", "Папка"], state="readonly")
file_type_menu.pack(pady=5)

# Поля для переименования
frame_settings = tk.Frame(root, bg="#2C2F33")
frame_settings.pack(pady=10, fill="x", padx=20)

# Оригинальное имя
custom_name_label = tk.Label(frame_settings, text="Имя файла:", bg="#2C2F33", fg="#FFFFFF")
custom_name_label.grid(row=0, column=0, padx=5, pady=5)
custom_name_entry = tk.Entry(frame_settings, textvariable=custom_name_var, width=20)
custom_name_entry.grid(row=0, column=1, padx=5, pady=5)

# Префикс
prefix_label = tk.Label(frame_settings, text="Префикс:", bg="#2C2F33", fg="#FFFFFF")
prefix_label.grid(row=1, column=0, padx=5, pady=5)
prefix_menu = ttk.Combobox(frame_settings, textvariable=prefix_var, values=["SS", "video", "photo"], state="readonly")
prefix_menu.grid(row=1, column=1, padx=5, pady=5)

# Чувствительность
sensitivity_label = tk.Label(frame_settings, text="Чувствительность:", bg="#2C2F33", fg="#FFFFFF")
sensitivity_label.grid(row=2, column=0, padx=5, pady=5)
sensitivity_menu = ttk.Combobox(frame_settings, textvariable=sensitivity_var, values=["NSC", "SC", "LSC", "VSC"], state="readonly")
sensitivity_menu.grid(row=2, column=1, padx=5, pady=5)

# Количество частей
pieces_label = tk.Label(frame_settings, text="Части:", bg="#2C2F33", fg="#FFFFFF")
pieces_label.grid(row=3, column=0, padx=5, pady=5)
pieces_entry = tk.Entry(frame_settings, textvariable=pieces_var, width=10)
pieces_entry.grid(row=3, column=1, padx=5, pady=5)

# Кнопка переименования
rename_button = tk.Button(root, text="Переименовать", command=rename_files, bg="#7289DA", fg="#FFFFFF", relief="flat")
rename_button.pack(pady=20)

root.mainloop()

//*

Корректировка: Когда происходит переименование, надо убрать оригинальное название с файла полностью, вместо этого добавь квадратик с вопросом "Оставить оригинальное название?", если включаю галочку, значит оставь,
если галочки нет, то убери изначальное название.
Напиши всё что внутри окошка на английском, передвинь все текста аккуратно на левую сторону с процентным соотношением, разделяй их разделителями, сделай углы у полей и кнопок чуть круглые

*//

import os
import tkinter as tk
from tkinter import ttk, filedialog, messagebox
from datetime import datetime

def browse_folder():
    folder_path.set(filedialog.askdirectory(title="Select Folder"))

def browse_file():
    folder_path.set(filedialog.askopenfilename(title="Select File"))

def rename_files():
    path = folder_path.get()
    if not os.path.exists(path):
        messagebox.showerror("Error", "The specified path does not exist")
        return

    # Collect data
    file_type = file_type_var.get()
    custom_name = custom_name_var.get()
    prefix = prefix_var.get()
    sensitivity = sensitivity_var.get()
    pieces = pieces_var.get()
    keep_original = keep_original_var.get()
    date = datetime.now().strftime("%d%m%y")

    try:
        files = []
        if os.path.isdir(path):
            files = os.listdir(path)
        else:
            files = [os.path.basename(path)]
            path = os.path.dirname(path)

        # Filter by type
        extensions = {
            "Photo": ["jpeg", "jpg", "png"],
            "Video": ["mp4", "mov", "avi"],
            "Archive": ["zip", "rar", "7z"],
            "GIF": ["gif"],
            "Folder": []
        }.get(file_type, [])

        if extensions:
            files = [f for f in files if f.split('.')[-1].lower() in extensions]

        # Rename files
        for index, file in enumerate(files, start=1):
            ext = file.split('.')[-1]
            if file_type == "Folder" and not os.path.isdir(os.path.join(path, file)):
                continue

            base_name = file.rsplit('.', 1)[0] if keep_original else ""
            new_name = f"{base_name}{'_' if base_name else ''}{custom_name}_{prefix}_{sensitivity}_p{index}_{pieces}p_{date}.{ext}"
            os.rename(os.path.join(path, file), os.path.join(path, new_name))

        messagebox.showinfo("Success", f"File renaming completed ({len(files)} files)")
    except Exception as e:
        messagebox.showerror("Error", str(e))

# Create window
root = tk.Tk()
root.title("File Renamer")
root.geometry("600x500")
root.configure(bg="#2C2F33")

folder_path = tk.StringVar()
custom_name_var = tk.StringVar(value="MyFile")
prefix_var = tk.StringVar(value="SS")
sensitivity_var = tk.StringVar(value="NSC")
pieces_var = tk.StringVar(value="1")
file_type_var = tk.StringVar(value="All")
keep_original_var = tk.BooleanVar()

# Title
title_label = tk.Label(root, text="File Renamer", bg="#2C2F33", fg="#FFFFFF", font=("Arial", 16))
title_label.pack(pady=10, anchor="w", padx=20)

# Path selection
frame_path = tk.Frame(root, bg="#2C2F33")
frame_path.pack(pady=10, fill="x", padx=20)

tk.Entry(frame_path, textvariable=folder_path, width=40, relief="flat", highlightthickness=1, highlightbackground="#7289DA", highlightcolor="#7289DA").pack(side="left", padx=5, ipady=5)

tk.Button(frame_path, text="Browse", command=browse_folder, bg="#7289DA", fg="#FFFFFF", relief="flat", borderwidth=0, highlightthickness=0).pack(side="left", padx=5)

# File type selection
separator1 = tk.Frame(root, height=2, bg="#99AAB5")
separator1.pack(fill="x", padx=20, pady=5)

file_type_label = tk.Label(root, text="File Type", bg="#2C2F33", fg="#FFFFFF", font=("Arial", 12))
file_type_label.pack(pady=5, anchor="w", padx=20)

file_type_menu = ttk.Combobox(root, textvariable=file_type_var, values=["All", "Photo", "Video", "Archive", "GIF", "Folder"], state="readonly")
file_type_menu.pack(pady=5, padx=20, fill="x")

# Rename settings
separator2 = tk.Frame(root, height=2, bg="#99AAB5")
separator2.pack(fill="x", padx=20, pady=5)

frame_settings = tk.Frame(root, bg="#2C2F33")
frame_settings.pack(pady=10, fill="x", padx=20)

# Keep original name
keep_original_checkbox = tk.Checkbutton(frame_settings, text="Keep Original Name?", variable=keep_original_var, bg="#2C2F33", fg="#FFFFFF", selectcolor="#2C2F33", activebackground="#2C2F33", font=("Arial", 10))
keep_original_checkbox.grid(row=0, column=0, columnspan=2, sticky="w", pady=5)

# Custom name
custom_name_label = tk.Label(frame_settings, text="Custom Name:", bg="#2C2F33", fg="#FFFFFF")
custom_name_label.grid(row=1, column=0, padx=5, pady=5, sticky="w")
custom_name_entry = tk.Entry(frame_settings, textvariable=custom_name_var, width=20, relief="flat", highlightthickness=1, highlightbackground="#7289DA", highlightcolor="#7289DA")
custom_name_entry.grid(row=1, column=1, padx=5, pady=5)

# Prefix
prefix_label = tk.Label(frame_settings, text="Prefix:", bg="#2C2F33", fg="#FFFFFF")
prefix_label.grid(row=2, column=0, padx=5, pady=5, sticky="w")
prefix_menu = ttk.Combobox(frame_settings, textvariable=prefix_var, values=["SS", "video", "photo"], state="readonly")
prefix_menu.grid(row=2, column=1, padx=5, pady=5)

# Sensitivity
sensitivity_label = tk.Label(frame_settings, text="Sensitivity:", bg="#2C2F33", fg="#FFFFFF")
sensitivity_label.grid(row=3, column=0, padx=5, pady=5, sticky="w")
sensitivity_menu = ttk.Combobox(frame_settings, textvariable=sensitivity_var, values=["NSC", "SC", "LSC", "VSC"], state="readonly")
sensitivity_menu.grid(row=3, column=1, padx=5, pady=5)

# Pieces
pieces_label = tk.Label(frame_settings, text="Pieces:", bg="#2C2F33", fg="#FFFFFF")
pieces_label.grid(row=4, column=0, padx=5, pady=5, sticky="w")
pieces_entry = tk.Entry(frame_settings, textvariable=pieces_var, width=10, relief="flat", highlightthickness=1, highlightbackground="#7289DA", highlightcolor="#7289DA")
pieces_entry.grid(row=4, column=1, padx=5, pady=5)

# Rename button
separator3 = tk.Frame(root, height=2, bg="#99AAB5")
separator3.pack(fill="x", padx=20, pady=5)

rename_button = tk.Button(root, text="Rename", command=rename_files, bg="#7289DA", fg="#FFFFFF", relief="flat", borderwidth=0, highlightthickness=0)
rename_button.pack(pady=20, padx=20, fill="x")

root.mainloop()

//*

Корректировка: Дизайн меня устраивает, но есть другая ошибка, а именно в том, что имя всё равно остаётся в самом конце, тоесть "Test_SS_VSC_p6_100p_311224.s (4)", после даты идёт точка и ориг название,
я хочу убрать это. Также файлы начинают не с p1 а с p2, что тоже неправильно

*//

import os
import tkinter as tk
from tkinter import ttk, filedialog, messagebox
from datetime import datetime

def browse_folder():
    folder_path.set(filedialog.askdirectory(title="Select Folder"))

def browse_file():
    folder_path.set(filedialog.askopenfilename(title="Select File"))

def rename_files():
    path = folder_path.get()
    if not os.path.exists(path):
        messagebox.showerror("Error", "The specified path does not exist")
        return

    # Collect data
    file_type = file_type_var.get()
    custom_name = custom_name_var.get()
    prefix = prefix_var.get()
    sensitivity = sensitivity_var.get()
    pieces = pieces_var.get()
    keep_original = keep_original_var.get()
    date = datetime.now().strftime("%d%m%y")

    try:
        files = []
        if os.path.isdir(path):
            files = os.listdir(path)
        else:
            files = [os.path.basename(path)]
            path = os.path.dirname(path)

        # Filter by type
        extensions = {
            "Photo": ["jpeg", "jpg", "png"],
            "Video": ["mp4", "mov", "avi"],
            "Archive": ["zip", "rar", "7z"],
            "GIF": ["gif"],
            "Folder": []
        }.get(file_type, [])

        if extensions:
            files = [f for f in files if f.split('.')[-1].lower() in extensions]

        # Rename files
        for index, file in enumerate(files, start=1):
            ext = file.split('.')[-1]
            if file_type == "Folder" and not os.path.isdir(os.path.join(path, file)):
                continue

            base_name = f"{custom_name}_{prefix}_{sensitivity}_p{index}_{pieces}p_{date}.{ext}"
            if keep_original:
                base_name = f"{file.rsplit('.', 1)[0]}_{base_name}"

            os.rename(os.path.join(path, file), os.path.join(path, base_name))

        messagebox.showinfo("Success", f"File renaming completed ({len(files)} files)")
    except Exception as e:
        messagebox.showerror("Error", str(e))

# Create window
root = tk.Tk()
root.title("File Renamer")
root.geometry("600x500")
root.configure(bg="#2C2F33")

folder_path = tk.StringVar()
custom_name_var = tk.StringVar(value="MyFile")
prefix_var = tk.StringVar(value="SS")
sensitivity_var = tk.StringVar(value="NSC")
pieces_var = tk.StringVar(value="1")
file_type_var = tk.StringVar(value="All")
keep_original_var = tk.BooleanVar()

# Title
title_label = tk.Label(root, text="File Renamer", bg="#2C2F33", fg="#FFFFFF", font=("Arial", 16))
title_label.pack(pady=10, anchor="w", padx=20)

# Path selection
frame_path = tk.Frame(root, bg="#2C2F33")
frame_path.pack(pady=10, fill="x", padx=20)

tk.Entry(frame_path, textvariable=folder_path, width=40, relief="flat", highlightthickness=1, highlightbackground="#7289DA", highlightcolor="#7289DA").pack(side="left", padx=5, ipady=5)

tk.Button(frame_path, text="Browse", command=browse_folder, bg="#7289DA", fg="#FFFFFF", relief="flat", borderwidth=0, highlightthickness=0).pack(side="left", padx=5)

# File type selection
separator1 = tk.Frame(root, height=2, bg="#99AAB5")
separator1.pack(fill="x", padx=20, pady=5)

file_type_label = tk.Label(root, text="File Type", bg="#2C2F33", fg="#FFFFFF", font=("Arial", 12))
file_type_label.pack(pady=5, anchor="w", padx=20)

file_type_menu = ttk.Combobox(root, textvariable=file_type_var, values=["All", "Photo", "Video", "Archive", "GIF", "Folder"], state="readonly")
file_type_menu.pack(pady=5, padx=20, fill="x")

# Rename settings
separator2 = tk.Frame(root, height=2, bg="#99AAB5")
separator2.pack(fill="x", padx=20, pady=5)

frame_settings = tk.Frame(root, bg="#2C2F33")
frame_settings.pack(pady=10, fill="x", padx=20)

# Keep original name
keep_original_checkbox = tk.Checkbutton(frame_settings, text="Keep Original Name?", variable=keep_original_var, bg="#2C2F33", fg="#FFFFFF", selectcolor="#2C2F33", activebackground="#2C2F33", font=("Arial", 10))
keep_original_checkbox.grid(row=0, column=0, columnspan=2, sticky="w", pady=5)

# Custom name
custom_name_label = tk.Label(frame_settings, text="Custom Name:", bg="#2C2F33", fg="#FFFFFF")
custom_name_label.grid(row=1, column=0, padx=5, pady=5, sticky="w")
custom_name_entry = tk.Entry(frame_settings, textvariable=custom_name_var, width=20, relief="flat", highlightthickness=1, highlightbackground="#7289DA", highlightcolor="#7289DA")
custom_name_entry.grid(row=1, column=1, padx=5, pady=5)

# Prefix
prefix_label = tk.Label(frame_settings, text="Prefix:", bg="#2C2F33", fg="#FFFFFF")
prefix_label.grid(row=2, column=0, padx=5, pady=5, sticky="w")
prefix_menu = ttk.Combobox(frame_settings, textvariable=prefix_var, values=["SS", "video", "photo"], state="readonly")
prefix_menu.grid(row=2, column=1, padx=5, pady=5)

# Sensitivity
sensitivity_label = tk.Label(frame_settings, text="Sensitivity:", bg="#2C2F33", fg="#FFFFFF")
sensitivity_label.grid(row=3, column=0, padx=5, pady=5, sticky="w")
sensitivity_menu = ttk.Combobox(frame_settings, textvariable=sensitivity_var, values=["NSC", "SC", "LSC", "VSC"], state="readonly")
sensitivity_menu.grid(row=3, column=1, padx=5, pady=5)

# Pieces
pieces_label = tk.Label(frame_settings, text="Pieces:", bg="#2C2F33", fg="#FFFFFF")
pieces_label.grid(row=4, column=0, padx=5, pady=5, sticky="w")
pieces_entry = tk.Entry(frame_settings, textvariable=pieces_var, width=10, relief="flat", highlightthickness=1, highlightbackground="#7289DA", highlightcolor="#7289DA")
pieces_entry.grid(row=4, column=1, padx=5, pady=5)

# Rename button
separator3 = tk.Frame(root, height=2, bg="#99AAB5")
separator3.pack(fill="x", padx=20, pady=5)

rename_button = tk.Button(root, text="Rename", command=rename_files, bg="#7289DA", fg="#FFFFFF", relief="flat", borderwidth=0, highlightthickness=0)
rename_button.pack(pady=20, padx=20, fill="x")

root.mainloop()

//*

Корректировка: Добавь рядом с каждым полем галочку, то есть включать данный шаблон или нет, также сделай все поля одинаково длинными и пусть везде будет гармональные дистанции между полями и текстами

*//

import os
import tkinter as tk
from tkinter import ttk, filedialog, messagebox
from datetime import datetime

def browse_folder():
    folder_path.set(filedialog.askdirectory(title="Select Folder"))

def browse_file():
    folder_path.set(filedialog.askopenfilename(title="Select File"))

def rename_files():
    path = folder_path.get()
    if not os.path.exists(path):
        messagebox.showerror("Error", "The specified path does not exist")
        return

    # Collect data
    file_type = file_type_var.get()
    custom_name = custom_name_var.get() if include_custom_name.get() else ""
    prefix = prefix_var.get() if include_prefix.get() else ""
    sensitivity = sensitivity_var.get() if include_sensitivity.get() else ""
    pieces = pieces_var.get() if include_pieces.get() else ""
    keep_original = keep_original_var.get()
    date = datetime.now().strftime("%d%m%y")

    try:
        files = []
        if os.path.isdir(path):
            files = os.listdir(path)
        else:
            files = [os.path.basename(path)]
            path = os.path.dirname(path)

        # Filter by type
        extensions = {
            "Photo": ["jpeg", "jpg", "png"],
            "Video": ["mp4", "mov", "avi"],
            "Archive": ["zip", "rar", "7z"],
            "GIF": ["gif"],
            "Folder": []
        }.get(file_type, [])

        if extensions:
            files = [f for f in files if f.split('.')[-1].lower() in extensions]

        # Rename files
        for index, file in enumerate(files, start=1):
            ext = file.split('.')[-1]
            if file_type == "Folder" and not os.path.isdir(os.path.join(path, file)):
                continue

            base_name = f"{custom_name}_{prefix}_{sensitivity}_p{index}_{pieces}p_{date}.{ext}".strip('_')
            if keep_original:
                base_name = f"{file.rsplit('.', 1)[0]}_{base_name}".strip('_')

            os.rename(os.path.join(path, file), os.path.join(path, base_name))

        messagebox.showinfo("Success", f"File renaming completed ({len(files)} files)")
    except Exception as e:
        messagebox.showerror("Error", str(e))

# Create window
root = tk.Tk()
root.title("File Renamer")
root.geometry("600x550")
root.configure(bg="#2C2F33")

folder_path = tk.StringVar()
custom_name_var = tk.StringVar(value="MyFile")
prefix_var = tk.StringVar(value="SS")
sensitivity_var = tk.StringVar(value="NSC")
pieces_var = tk.StringVar(value="1")
file_type_var = tk.StringVar(value="All")
keep_original_var = tk.BooleanVar()
include_custom_name = tk.BooleanVar(value=True)
include_prefix = tk.BooleanVar(value=True)
include_sensitivity = tk.BooleanVar(value=True)
include_pieces = tk.BooleanVar(value=True)

# Title
title_label = tk.Label(root, text="File Renamer", bg="#2C2F33", fg="#FFFFFF", font=("Arial", 16))
title_label.pack(pady=10, anchor="w", padx=20)

# Path selection
frame_path = tk.Frame(root, bg="#2C2F33")
frame_path.pack(pady=10, fill="x", padx=20)

tk.Entry(frame_path, textvariable=folder_path, width=40, relief="flat", highlightthickness=1, highlightbackground="#7289DA", highlightcolor="#7289DA").pack(side="left", padx=5, ipady=5)

tk.Button(frame_path, text="Browse", command=browse_folder, bg="#7289DA", fg="#FFFFFF", relief="flat", borderwidth=0, highlightthickness=0).pack(side="left", padx=5)

# File type selection
separator1 = tk.Frame(root, height=2, bg="#99AAB5")
separator1.pack(fill="x", padx=20, pady=5)

file_type_label = tk.Label(root, text="File Type", bg="#2C2F33", fg="#FFFFFF", font=("Arial", 12))
file_type_label.pack(pady=5, anchor="w", padx=20)

file_type_menu = ttk.Combobox(root, textvariable=file_type_var, values=["All", "Photo", "Video", "Archive", "GIF", "Folder"], state="readonly")
file_type_menu.pack(pady=5, padx=20, fill="x")

# Rename settings
separator2 = tk.Frame(root, height=2, bg="#99AAB5")
separator2.pack(fill="x", padx=20, pady=5)

frame_settings = tk.Frame(root, bg="#2C2F33")
frame_settings.pack(pady=10, fill="x", padx=20)

# Custom name
custom_name_checkbox = tk.Checkbutton(frame_settings, text="Include Custom Name", variable=include_custom_name, bg="#2C2F33", fg="#FFFFFF", selectcolor="#2C2F33", activebackground="#2C2F33")
custom_name_checkbox.grid(row=0, column=0, padx=5, pady=5, sticky="w")
custom_name_entry = tk.Entry(frame_settings, textvariable=custom_name_var, width=25, relief="flat", highlightthickness=1, highlightbackground="#7289DA", highlightcolor="#7289DA")
custom_name_entry.grid(row=0, column=1, padx=5, pady=5)

# Prefix
prefix_checkbox = tk.Checkbutton(frame_settings, text="Include Prefix", variable=include_prefix, bg="#2C2F33", fg="#FFFFFF", selectcolor="#2C2F33", activebackground="#2C2F33")
prefix_checkbox.grid(row=1, column=0, padx=5, pady=5, sticky="w")
prefix_menu = ttk.Combobox(frame_settings, textvariable=prefix_var, values=["SS", "video", "photo"], state="readonly")
prefix_menu.grid(row=1, column=1, padx=5, pady=5)

# Sensitivity
sensitivity_checkbox = tk.Checkbutton(frame_settings, text="Include Sensitivity", variable=include_sensitivity, bg="#2C2F33", fg="#FFFFFF", selectcolor="#2C2F33", activebackground="#2C2F33")
sensitivity_checkbox.grid(row=2, column=0, padx=5, pady=5, sticky="w")
sensitivity_menu = ttk.Combobox(frame_settings, textvariable=sensitivity_var, values=["NSC", "SC", "LSC", "VSC"], state="readonly")
sensitivity_menu.grid(row=2, column=1, padx=5, pady=5)

# Pieces
pieces_checkbox = tk.Checkbutton(frame_settings, text="Include Pieces", variable=include_pieces, bg="#2C2F33", fg="#FFFFFF", selectcolor="#2C2F33", activebackground="#2C2F33")
pieces_checkbox.grid(row=3, column=0, padx=5, pady=5, sticky="w")
pieces_entry = tk.Entry(frame_settings, textvariable=pieces_var, width=25, relief="flat", highlightthickness=1, highlightbackground="#7289DA", highlightcolor="#7289DA")
pieces_entry.grid(row=3, column=1, padx=5, pady=5)

# Rename button
separator3 = tk.Frame(root, height=2, bg="#99AAB5")
separator3.pack(fill="x", padx=20, pady=5)

rename_button = tk.Button(root, text="Rename", command=rename_files, bg="#7289DA", fg="#FFFFFF", relief="flat", borderwidth=0, highlightthickness=0)
rename_button.pack(pady=20, padx=20, fill="x")

root.mainloop()

//*

Корректировка: Также добавь галочку для part, то есть нужно ли считать part1, part2 и тд

*//

import os
import tkinter as tk
from tkinter import ttk, filedialog, messagebox
from datetime import datetime

def browse_folder():
    folder_path.set(filedialog.askdirectory(title="Select Folder"))

def browse_file():
    folder_path.set(filedialog.askopenfilename(title="Select File"))

def rename_files():
    path = folder_path.get()
    if not os.path.exists(path):
        messagebox.showerror("Error", "The specified path does not exist")
        return

    # Collect data
    file_type = file_type_var.get()
    custom_name = custom_name_var.get() if include_custom_name.get() else ""
    prefix = prefix_var.get() if include_prefix.get() else ""
    sensitivity = sensitivity_var.get() if include_sensitivity.get() else ""
    pieces = pieces_var.get() if include_pieces.get() else ""
    include_parts = include_parts_var.get()
    keep_original = keep_original_var.get()
    date = datetime.now().strftime("%d%m%y")

    try:
        files = []
        if os.path.isdir(path):
            files = os.listdir(path)
        else:
            files = [os.path.basename(path)]
            path = os.path.dirname(path)

        # Filter by type
        extensions = {
            "Photo": ["jpeg", "jpg", "png"],
            "Video": ["mp4", "mov", "avi"],
            "Archive": ["zip", "rar", "7z"],
            "GIF": ["gif"],
            "Folder": []
        }.get(file_type, [])

        if extensions:
            files = [f for f in files if f.split('.')[-1].lower() in extensions]

        # Rename files
        for index, file in enumerate(files, start=1):
            ext = file.split('.')[-1]
            if file_type == "Folder" and not os.path.isdir(os.path.join(path, file)):
                continue

            part_index = f"_p{index}" if include_parts else ""
            base_name = f"{custom_name}_{prefix}_{sensitivity}{part_index}_{pieces}p_{date}.{ext}".strip('_')
            if keep_original:
                base_name = f"{file.rsplit('.', 1)[0]}_{base_name}".strip('_')

            os.rename(os.path.join(path, file), os.path.join(path, base_name))

        messagebox.showinfo("Success", f"File renaming completed ({len(files)} files)")
    except Exception as e:
        messagebox.showerror("Error", str(e))

# Create window
root = tk.Tk()
root.title("File Renamer")
root.geometry("600x600")
root.configure(bg="#2C2F33")

folder_path = tk.StringVar()
custom_name_var = tk.StringVar(value="MyFile")
prefix_var = tk.StringVar(value="SS")
sensitivity_var = tk.StringVar(value="NSC")
pieces_var = tk.StringVar(value="1")
file_type_var = tk.StringVar(value="All")
keep_original_var = tk.BooleanVar()
include_custom_name = tk.BooleanVar(value=True)
include_prefix = tk.BooleanVar(value=True)
include_sensitivity = tk.BooleanVar(value=True)
include_pieces = tk.BooleanVar(value=True)
include_parts_var = tk.BooleanVar(value=True)

# Title
title_label = tk.Label(root, text="File Renamer", bg="#2C2F33", fg="#FFFFFF", font=("Arial", 16))
title_label.pack(pady=10, anchor="w", padx=20)

# Path selection
frame_path = tk.Frame(root, bg="#2C2F33")
frame_path.pack(pady=10, fill="x", padx=20)

tk.Entry(frame_path, textvariable=folder_path, width=40, relief="flat", highlightthickness=1, highlightbackground="#7289DA", highlightcolor="#7289DA").pack(side="left", padx=5, ipady=5)

tk.Button(frame_path, text="Browse", command=browse_folder, bg="#7289DA", fg="#FFFFFF", relief="flat", borderwidth=0, highlightthickness=0).pack(side="left", padx=5)

# File type selection
separator1 = tk.Frame(root, height=2, bg="#99AAB5")
separator1.pack(fill="x", padx=20, pady=5)

file_type_label = tk.Label(root, text="File Type", bg="#2C2F33", fg="#FFFFFF", font=("Arial", 12))
file_type_label.pack(pady=5, anchor="w", padx=20)

file_type_menu = ttk.Combobox(root, textvariable=file_type_var, values=["All", "Photo", "Video", "Archive", "GIF", "Folder"], state="readonly")
file_type_menu.pack(pady=5, padx=20, fill="x")

# Rename settings
separator2 = tk.Frame(root, height=2, bg="#99AAB5")
separator2.pack(fill="x", padx=20, pady=5)

frame_settings = tk.Frame(root, bg="#2C2F33")
frame_settings.pack(pady=10, fill="x", padx=20)

# Custom name
custom_name_checkbox = tk.Checkbutton(frame_settings, text="Include Custom Name", variable=include_custom_name, bg="#2C2F33", fg="#FFFFFF", selectcolor="#2C2F33", activebackground="#2C2F33")
custom_name_checkbox.grid(row=0, column=0, padx=5, pady=5, sticky="w")
custom_name_entry = tk.Entry(frame_settings, textvariable=custom_name_var, width=25, relief="flat", highlightthickness=1, highlightbackground="#7289DA", highlightcolor="#7289DA")
custom_name_entry.grid(row=0, column=1, padx=5, pady=5)

# Prefix
prefix_checkbox = tk.Checkbutton(frame_settings, text="Include Prefix", variable=include_prefix, bg="#2C2F33", fg="#FFFFFF", selectcolor="#2C2F33", activebackground="#2C2F33")
prefix_checkbox.grid(row=1, column=0, padx=5, pady=5, sticky="w")
prefix_menu = ttk.Combobox(frame_settings, textvariable=prefix_var, values=["SS", "video", "photo"], state="readonly")
prefix_menu.grid(row=1, column=1, padx=5, pady=5)

# Sensitivity
sensitivity_checkbox = tk.Checkbutton(frame_settings, text="Include Sensitivity", variable=include_sensitivity, bg="#2C2F33", fg="#FFFFFF", selectcolor="#2C2F33", activebackground="#2C2F33")
sensitivity_checkbox.grid(row=2, column=0, padx=5, pady=5, sticky="w")
sensitivity_menu = ttk.Combobox(frame_settings, textvariable=sensitivity_var, values=["NSC", "SC", "LSC", "VSC"], state="readonly")
sensitivity_menu.grid(row=2, column=1, padx=5, pady=5)

# Pieces
pieces_checkbox = tk.Checkbutton(frame_settings, text="Include Pieces", variable=include_pieces, bg="#2C2F33", fg="#FFFFFF", selectcolor="#2C2F33", activebackground="#2C2F33")
pieces_checkbox.grid(row=3, column=0, padx=5, pady=5, sticky="w")
pieces_entry = tk.Entry(frame_settings, textvariable=pieces_var, width=25, relief="flat", highlightthickness=1, highlightbackground="#7289DA", highlightcolor="#7289DA")
pieces_entry.grid(row=3, column=1, padx=5, pady=5)

# Parts
parts_checkbox = tk.Checkbutton(frame_settings, text="Include Part Numbers", variable=include_parts_var, bg="#2C2F33", fg="#FFFFFF", selectcolor="#2C2F33", activebackground="#2C2F33")
parts_checkbox.grid(row=4, column=0, padx=5, pady=5, sticky="w")

# Rename button
separator3 = tk.Frame(root, height=2, bg="#99AAB5")
separator3.pack(fill="x", padx=20, pady=5)

rename_button = tk.Button(root, text="Rename", command=rename_files, bg="#7289DA", fg="#FFFFFF", relief="flat", borderwidth=0, highlightthickness=0)
rename_button.pack(pady=20, padx=20, fill="x")

root.mainloop()


//*

Корректировка: Галочки incldue не работают, либ выдают ошибку, добавь в каждом поле none что будет означать что тут пусто и не надо ничего вписать,
например не надо писать какой p1, p2 и тд, либо сколько piece 

*//

import os
import tkinter as tk
from tkinter import ttk, filedialog, messagebox
from datetime import datetime

def browse_folder():
    folder_path.set(filedialog.askdirectory(title="Select Folder"))

def browse_file():
    folder_path.set(filedialog.askopenfilename(title="Select File"))

def rename_files():
    path = folder_path.get()
    if not os.path.exists(path):
        messagebox.showerror("Error", "The specified path does not exist")
        return

    # Collect data
    file_type = file_type_var.get()
    custom_name = custom_name_var.get() if custom_name_var.get() != "none" else ""
    prefix = prefix_var.get() if prefix_var.get() != "none" else ""
    sensitivity = sensitivity_var.get() if sensitivity_var.get() != "none" else ""
    pieces = pieces_var.get() if pieces_var.get() != "none" else ""
    include_parts = include_parts_var.get()
    keep_original = keep_original_var.get()
    date = datetime.now().strftime("%d%m%y")

    try:
        files = []
        if os.path.isdir(path):
            files = os.listdir(path)
        else:
            files = [os.path.basename(path)]
            path = os.path.dirname(path)

        # Filter by type
        extensions = {
            "Photo": ["jpeg", "jpg", "png"],
            "Video": ["mp4", "mov", "avi"],
            "Archive": ["zip", "rar", "7z"],
            "GIF": ["gif"],
            "Folder": []
        }.get(file_type, [])

        if extensions:
            files = [f for f in files if f.split('.')[-1].lower() in extensions]

        # Rename files
        for index, file in enumerate(files, start=1):
            ext = file.split('.')[-1]
            if file_type == "Folder" and not os.path.isdir(os.path.join(path, file)):
                continue

            part_index = f"_p{index}" if include_parts else ""
            base_name = f"{custom_name}_{prefix}_{sensitivity}{part_index}_{pieces}p_{date}.{ext}".strip('_')
            if keep_original:
                base_name = f"{file.rsplit('.', 1)[0]}_{base_name}".strip('_')

            os.rename(os.path.join(path, file), os.path.join(path, base_name))

        messagebox.showinfo("Success", f"File renaming completed ({len(files)} files)")
    except Exception as e:
        messagebox.showerror("Error", str(e))

# Create window
root = tk.Tk()
root.title("File Renamer")
root.geometry("600x600")
root.configure(bg="#2C2F33")

folder_path = tk.StringVar()
custom_name_var = tk.StringVar(value="none")
prefix_var = tk.StringVar(value="none")
sensitivity_var = tk.StringVar(value="none")
pieces_var = tk.StringVar(value="none")
file_type_var = tk.StringVar(value="All")
keep_original_var = tk.BooleanVar()
include_parts_var = tk.BooleanVar(value=True)

# Title
title_label = tk.Label(root, text="File Renamer", bg="#2C2F33", fg="#FFFFFF", font=("Arial", 16))
title_label.pack(pady=10, anchor="w", padx=20)

# Path selection
frame_path = tk.Frame(root, bg="#2C2F33")
frame_path.pack(pady=10, fill="x", padx=20)

tk.Entry(frame_path, textvariable=folder_path, width=40, relief="flat", highlightthickness=1, highlightbackground="#7289DA", highlightcolor="#7289DA").pack(side="left", padx=5, ipady=5)

tk.Button(frame_path, text="Browse", command=browse_folder, bg="#7289DA", fg="#FFFFFF", relief="flat", borderwidth=0, highlightthickness=0).pack(side="left", padx=5)

# File type selection
separator1 = tk.Frame(root, height=2, bg="#99AAB5")
separator1.pack(fill="x", padx=20, pady=5)

file_type_label = tk.Label(root, text="File Type", bg="#2C2F33", fg="#FFFFFF", font=("Arial", 12))
file_type_label.pack(pady=5, anchor="w", padx=20)

file_type_menu = ttk.Combobox(root, textvariable=file_type_var, values=["All", "Photo", "Video", "Archive", "GIF", "Folder"], state="readonly")
file_type_menu.pack(pady=5, padx=20, fill="x")

# Rename settings
separator2 = tk.Frame(root, height=2, bg="#99AAB5")
separator2.pack(fill="x", padx=20, pady=5)

frame_settings = tk.Frame(root, bg="#2C2F33")
frame_settings.pack(pady=10, fill="x", padx=20)

# Custom name
custom_name_label = tk.Label(frame_settings, text="Custom Name:", bg="#2C2F33", fg="#FFFFFF")
custom_name_label.grid(row=0, column=0, padx=5, pady=5, sticky="w")
custom_name_entry = ttk.Combobox(frame_settings, textvariable=custom_name_var, values=["none", "MyFile", "Custom"], state="readonly")
custom_name_entry.grid(row=0, column=1, padx=5, pady=5)

# Prefix
prefix_label = tk.Label(frame_settings, text="Prefix:", bg="#2C2F33", fg="#FFFFFF")
prefix_label.grid(row=1, column=0, padx=5, pady=5, sticky="w")
prefix_menu = ttk.Combobox(frame_settings, textvariable=prefix_var, values=["none", "SS", "video", "photo"], state="readonly")
prefix_menu.grid(row=1, column=1, padx=5, pady=5)

# Sensitivity
sensitivity_label = tk.Label(frame_settings, text="Sensitivity:", bg="#2C2F33", fg="#FFFFFF")
sensitivity_label.grid(row=2, column=0, padx=5, pady=5, sticky="w")
sensitivity_menu = ttk.Combobox(frame_settings, textvariable=sensitivity_var, values=["none", "NSC", "SC", "LSC", "VSC"], state="readonly")
sensitivity_menu.grid(row=2, column=1, padx=5, pady=5)

# Pieces
pieces_label = tk.Label(frame_settings, text="Pieces:", bg="#2C2F33", fg="#FFFFFF")
pieces_label.grid(row=3, column=0, padx=5, pady=5, sticky="w")
pieces_entry = ttk.Combobox(frame_settings, textvariable=pieces_var, values=["none", "1", "2", "3"], state="readonly")
pieces_entry.grid(row=3, column=1, padx=5, pady=5)

# Parts
parts_checkbox = tk.Checkbutton(frame_settings, text="Include Part Numbers", variable=include_parts_var, bg="#2C2F33", fg="#FFFFFF", selectcolor="#2C2F33", activebackground="#2C2F33")
parts_checkbox.grid(row=4, column=0, padx=5, pady=5, sticky="w")

# Rename button
separator3 = tk.Frame(root, height=2, bg="#99AAB5")
separator3.pack(fill="x", padx=20, pady=5)

rename_button = tk.Button(root, text="Rename", command=rename_files, bg="#7289DA", fg="#FFFFFF", relief="flat", borderwidth=0, highlightthickness=0)
rename_button.pack(pady=20, padx=20, fill="x")

root.mainloop()

//*

Корректировка: Убери все include и добавь обратно поле там, где можно вписать название для файлов, также убери галочку, стоит добавлять p1, p2, p3 или нет

*// 

import os
import tkinter as tk
from tkinter import ttk, filedialog, messagebox
from datetime import datetime

def browse_folder():
    folder_path.set(filedialog.askdirectory(title="Select Folder"))

def browse_file():
    folder_path.set(filedialog.askopenfilename(title="Select File"))

def rename_files():
    path = folder_path.get()
    if not os.path.exists(path):
        messagebox.showerror("Error", "The specified path does not exist")
        return

    # Collect data
    file_type = file_type_var.get()
    custom_name = custom_name_var.get()
    prefix = prefix_var.get() if prefix_var.get() != "none" else ""
    sensitivity = sensitivity_var.get() if sensitivity_var.get() != "none" else ""
    pieces = pieces_var.get() if pieces_var.get() != "none" else ""
    keep_original = keep_original_var.get()
    date = datetime.now().strftime("%d%m%y")

    try:
        files = []
        if os.path.isdir(path):
            files = os.listdir(path)
        else:
            files = [os.path.basename(path)]
            path = os.path.dirname(path)

        # Filter by type
        extensions = {
            "Photo": ["jpeg", "jpg", "png"],
            "Video": ["mp4", "mov", "avi"],
            "Archive": ["zip", "rar", "7z"],
            "GIF": ["gif"],
            "Folder": []
        }.get(file_type, [])

        if extensions:
            files = [f for f in files if f.split('.')[-1].lower() in extensions]

        # Rename files
        for index, file in enumerate(files, start=1):
            ext = file.split('.')[-1]
            if file_type == "Folder" and not os.path.isdir(os.path.join(path, file)):
                continue

            part_index = f"_p{index}"
            base_name = f"{custom_name}_{prefix}_{sensitivity}{part_index}_{pieces}p_{date}.{ext}".strip('_')
            if keep_original:
                base_name = f"{file.rsplit('.', 1)[0]}_{base_name}".strip('_')

            os.rename(os.path.join(path, file), os.path.join(path, base_name))

        messagebox.showinfo("Success", f"File renaming completed ({len(files)} files)")
    except Exception as e:
        messagebox.showerror("Error", str(e))

# Create window
root = tk.Tk()
root.title("File Renamer")
root.geometry("600x600")
root.configure(bg="#2C2F33")

folder_path = tk.StringVar()
custom_name_var = tk.StringVar(value="MyFile")
prefix_var = tk.StringVar(value="none")
sensitivity_var = tk.StringVar(value="none")
pieces_var = tk.StringVar(value="none")
file_type_var = tk.StringVar(value="All")
keep_original_var = tk.BooleanVar()

# Title
title_label = tk.Label(root, text="File Renamer", bg="#2C2F33", fg="#FFFFFF", font=("Arial", 16))
title_label.pack(pady=10, anchor="w", padx=20)

# Path selection
frame_path = tk.Frame(root, bg="#2C2F33")
frame_path.pack(pady=10, fill="x", padx=20)

tk.Entry(frame_path, textvariable=folder_path, width=40, relief="flat", highlightthickness=1, highlightbackground="#7289DA", highlightcolor="#7289DA").pack(side="left", padx=5, ipady=5)

tk.Button(frame_path, text="Browse", command=browse_folder, bg="#7289DA", fg="#FFFFFF", relief="flat", borderwidth=0, highlightthickness=0).pack(side="left", padx=5)

# File type selection
separator1 = tk.Frame(root, height=2, bg="#99AAB5")
separator1.pack(fill="x", padx=20, pady=5)

file_type_label = tk.Label(root, text="File Type", bg="#2C2F33", fg="#FFFFFF", font=("Arial", 12))
file_type_label.pack(pady=5, anchor="w", padx=20)

file_type_menu = ttk.Combobox(root, textvariable=file_type_var, values=["All", "Photo", "Video", "Archive", "GIF", "Folder"], state="readonly")
file_type_menu.pack(pady=5, padx=20, fill="x")

# Rename settings
separator2 = tk.Frame(root, height=2, bg="#99AAB5")
separator2.pack(fill="x", padx=20, pady=5)

frame_settings = tk.Frame(root, bg="#2C2F33")
frame_settings.pack(pady=10, fill="x", padx=20)

# Custom name
custom_name_label = tk.Label(frame_settings, text="Custom Name:", bg="#2C2F33", fg="#FFFFFF")
custom_name_label.grid(row=0, column=0, padx=5, pady=5, sticky="w")
custom_name_entry = tk.Entry(frame_settings, textvariable=custom_name_var, width=25, relief="flat", highlightthickness=1, highlightbackground="#7289DA", highlightcolor="#7289DA")
custom_name_entry.grid(row=0, column=1, padx=5, pady=5)

# Prefix
prefix_label = tk.Label(frame_settings, text="Prefix:", bg="#2C2F33", fg="#FFFFFF")
prefix_label.grid(row=1, column=0, padx=5, pady=5, sticky="w")
prefix_menu = ttk.Combobox(frame_settings, textvariable=prefix_var, values=["none", "SS", "video", "photo"], state="readonly")
prefix_menu.grid(row=1, column=1, padx=5, pady=5)

# Sensitivity
sensitivity_label = tk.Label(frame_settings, text="Sensitivity:", bg="#2C2F33", fg="#FFFFFF")
sensitivity_label.grid(row=2, column=0, padx=5, pady=5, sticky="w")
sensitivity_menu = ttk.Combobox(frame_settings, textvariable=sensitivity_var, values=["none", "NSC", "SC", "LSC", "VSC"], state="readonly")
sensitivity_menu.grid(row=2, column=1, padx=5, pady=5)

# Pieces
pieces_label = tk.Label(frame_settings, text="Pieces:", bg="#2C2F33", fg="#FFFFFF")
pieces_label.grid(row=3, column=0, padx=5, pady=5, sticky="w")
pieces_entry = ttk.Combobox(frame_settings, textvariable=pieces_var, values=["none", "1", "2", "3"], state="readonly")
pieces_entry.grid(row=3, column=1, padx=5, pady=5)

# Rename button
separator3 = tk.Frame(root, height=2, bg="#99AAB5")
separator3.pack(fill="x", padx=20, pady=5)

rename_button = tk.Button(root, text="Rename", command=rename_files, bg="#7289DA", fg="#FFFFFF", relief="flat", borderwidth=0, highlightthickness=0)
rename_button.pack(pady=20, padx=20, fill="x")

root.mainloop()

//*

Корректировка: Также верни поле для Piece и убери none в полях

*//

import os
import tkinter as tk
from tkinter import ttk, filedialog, messagebox
from datetime import datetime

def browse_folder():
    folder_path.set(filedialog.askdirectory(title="Select Folder"))

def browse_file():
    folder_path.set(filedialog.askopenfilename(title="Select File"))

def rename_files():
    path = folder_path.get()
    if not os.path.exists(path):
        messagebox.showerror("Error", "The specified path does not exist")
        return

    # Collect data
    file_type = file_type_var.get()
    custom_name = custom_name_var.get()
    prefix = prefix_var.get()
    sensitivity = sensitivity_var.get()
    pieces = pieces_var.get()
    keep_original = keep_original_var.get()
    date = datetime.now().strftime("%d%m%y")

    try:
        files = []
        if os.path.isdir(path):
            files = os.listdir(path)
        else:
            files = [os.path.basename(path)]
            path = os.path.dirname(path)

        # Filter by type
        extensions = {
            "Photo": ["jpeg", "jpg", "png"],
            "Video": ["mp4", "mov", "avi"],
            "Archive": ["zip", "rar", "7z"],
            "GIF": ["gif"],
            "Folder": []
        }.get(file_type, [])

        if extensions:
            files = [f for f in files if f.split('.')[-1].lower() in extensions]

        # Rename files
        for index, file in enumerate(files, start=1):
            ext = file.split('.')[-1]
            if file_type == "Folder" and not os.path.isdir(os.path.join(path, file)):
                continue

            part_index = f"_p{index}"
            base_name = f"{custom_name}_{prefix}_{sensitivity}{part_index}_{pieces}p_{date}.{ext}".strip('_')
            if keep_original:
                base_name = f"{file.rsplit('.', 1)[0]}_{base_name}".strip('_')

            os.rename(os.path.join(path, file), os.path.join(path, base_name))

        messagebox.showinfo("Success", f"File renaming completed ({len(files)} files)")
    except Exception as e:
        messagebox.showerror("Error", str(e))

# Create window
root = tk.Tk()
root.title("File Renamer")
root.geometry("600x600")
root.configure(bg="#2C2F33")

folder_path = tk.StringVar()
custom_name_var = tk.StringVar(value="MyFile")
prefix_var = tk.StringVar(value="")
sensitivity_var = tk.StringVar(value="")
pieces_var = tk.StringVar(value="")
file_type_var = tk.StringVar(value="All")
keep_original_var = tk.BooleanVar()

# Title
title_label = tk.Label(root, text="File Renamer", bg="#2C2F33", fg="#FFFFFF", font=("Arial", 16))
title_label.pack(pady=10, anchor="w", padx=20)

# Path selection
frame_path = tk.Frame(root, bg="#2C2F33")
frame_path.pack(pady=10, fill="x", padx=20)

tk.Entry(frame_path, textvariable=folder_path, width=40, relief="flat", highlightthickness=1, highlightbackground="#7289DA", highlightcolor="#7289DA").pack(side="left", padx=5, ipady=5)

tk.Button(frame_path, text="Browse", command=browse_folder, bg="#7289DA", fg="#FFFFFF", relief="flat", borderwidth=0, highlightthickness=0).pack(side="left", padx=5)

# File type selection
separator1 = tk.Frame(root, height=2, bg="#99AAB5")
separator1.pack(fill="x", padx=20, pady=5)

file_type_label = tk.Label(root, text="File Type", bg="#2C2F33", fg="#FFFFFF", font=("Arial", 12))
file_type_label.pack(pady=5, anchor="w", padx=20)

file_type_menu = ttk.Combobox(root, textvariable=file_type_var, values=["All", "Photo", "Video", "Archive", "GIF", "Folder"], state="readonly")
file_type_menu.pack(pady=5, padx=20, fill="x")

# Rename settings
separator2 = tk.Frame(root, height=2, bg="#99AAB5")
separator2.pack(fill="x", padx=20, pady=5)

frame_settings = tk.Frame(root, bg="#2C2F33")
frame_settings.pack(pady=10, fill="x", padx=20)

# Custom name
custom_name_label = tk.Label(frame_settings, text="Custom Name:", bg="#2C2F33", fg="#FFFFFF")
custom_name_label.grid(row=0, column=0, padx=5, pady=5, sticky="w")
custom_name_entry = tk.Entry(frame_settings, textvariable=custom_name_var, width=25, relief="flat", highlightthickness=1, highlightbackground="#7289DA", highlightcolor="#7289DA")
custom_name_entry.grid(row=0, column=1, padx=5, pady=5)

# Prefix
prefix_label = tk.Label(frame_settings, text="Prefix:", bg="#2C2F33", fg="#FFFFFF")
prefix_label.grid(row=1, column=0, padx=5, pady=5, sticky="w")
prefix_menu = tk.Entry(frame_settings, textvariable=prefix_var, width=25, relief="flat", highlightthickness=1, highlightbackground="#7289DA", highlightcolor="#7289DA")
prefix_menu.grid(row=1, column=1, padx=5, pady=5)

# Sensitivity
sensitivity_label = tk.Label(frame_settings, text="Sensitivity:", bg="#2C2F33", fg="#FFFFFF")
sensitivity_label.grid(row=2, column=0, padx=5, pady=5, sticky="w")
sensitivity_menu = tk.Entry(frame_settings, textvariable=sensitivity_var, width=25, relief="flat", highlightthickness=1, highlightbackground="#7289DA", highlightcolor="#7289DA")
sensitivity_menu.grid(row=2, column=1, padx=5, pady=5)

# Pieces
pieces_label = tk.Label(frame_settings, text="Pieces:", bg="#2C2F33", fg="#FFFFFF")
pieces_label.grid(row=3, column=0, padx=5, pady=5, sticky="w")
pieces_entry = tk.Entry(frame_settings, textvariable=pieces_var, width=25, relief="flat", highlightthickness=1, highlightbackground="#7289DA", highlightcolor="#7289DA")
pieces_entry.grid(row=3, column=1, padx=5, pady=5)

# Rename button
separator3 = tk.Frame(root, height=2, bg="#99AAB5")
separator3.pack(fill="x", padx=20, pady=5)

rename_button = tk.Button(root, text="Rename", command=rename_files, bg="#7289DA", fg="#FFFFFF", relief="flat", borderwidth=0, highlightthickness=0)
rename_button.pack(pady=20, padx=20, fill="x")

root.mainloop()

//*

Корректировка: напиши справа от поля prefix текст "SC, LSC, VSC, NSC, mixSC"

*//

import os
import tkinter as tk
from tkinter import ttk, filedialog, messagebox
from datetime import datetime

def browse_folder():
    folder_path.set(filedialog.askdirectory(title="Select Folder"))

def browse_file():
    folder_path.set(filedialog.askopenfilename(title="Select File"))

def rename_files():
    path = folder_path.get()
    if not os.path.exists(path):
        messagebox.showerror("Error", "The specified path does not exist")
        return

    # Collect data
    file_type = file_type_var.get()
    custom_name = custom_name_var.get()
    prefix = prefix_var.get()
    sensitivity = sensitivity_var.get()
    pieces = pieces_var.get()
    keep_original = keep_original_var.get()
    date = datetime.now().strftime("%d%m%y")

    try:
        files = []
        if os.path.isdir(path):
            files = os.listdir(path)
        else:
            files = [os.path.basename(path)]
            path = os.path.dirname(path)

        # Filter by type
        extensions = {
            "Photo": ["jpeg", "jpg", "png"],
            "Video": ["mp4", "mov", "avi"],
            "Archive": ["zip", "rar", "7z"],
            "GIF": ["gif"],
            "Folder": []
        }.get(file_type, [])

        if extensions:
            files = [f for f in files if f.split('.')[-1].lower() in extensions]

        # Rename files
        for index, file in enumerate(files, start=1):
            ext = file.split('.')[-1]
            if file_type == "Folder" and not os.path.isdir(os.path.join(path, file)):
                continue

            part_index = f"_p{index}"
            base_name = f"{custom_name}_{prefix}_{sensitivity}{part_index}_{pieces}p_{date}.{ext}".strip('_')
            if keep_original:
                base_name = f"{file.rsplit('.', 1)[0]}_{base_name}".strip('_')

            os.rename(os.path.join(path, file), os.path.join(path, base_name))

        messagebox.showinfo("Success", f"File renaming completed ({len(files)} files)")
    except Exception as e:
        messagebox.showerror("Error", str(e))

# Create window
root = tk.Tk()
root.title("File Renamer")
root.geometry("600x600")
root.configure(bg="#2C2F33")

folder_path = tk.StringVar()
custom_name_var = tk.StringVar(value="MyFile")
prefix_var = tk.StringVar(value="")
sensitivity_var = tk.StringVar(value="")
pieces_var = tk.StringVar(value="")
file_type_var = tk.StringVar(value="All")
keep_original_var = tk.BooleanVar()

# Title
title_label = tk.Label(root, text="File Renamer", bg="#2C2F33", fg="#FFFFFF", font=("Arial", 16))
title_label.pack(pady=10, anchor="w", padx=20)

# Path selection
frame_path = tk.Frame(root, bg="#2C2F33")
frame_path.pack(pady=10, fill="x", padx=20)

tk.Entry(frame_path, textvariable=folder_path, width=40, relief="flat", highlightthickness=1, highlightbackground="#7289DA", highlightcolor="#7289DA").pack(side="left", padx=5, ipady=5)

tk.Button(frame_path, text="Browse", command=browse_folder, bg="#7289DA", fg="#FFFFFF", relief="flat", borderwidth=0, highlightthickness=0).pack(side="left", padx=5)

# File type selection
separator1 = tk.Frame(root, height=2, bg="#99AAB5")
separator1.pack(fill="x", padx=20, pady=5)

file_type_label = tk.Label(root, text="File Type", bg="#2C2F33", fg="#FFFFFF", font=("Arial", 12))
file_type_label.pack(pady=5, anchor="w", padx=20)

file_type_menu = ttk.Combobox(root, textvariable=file_type_var, values=["All", "Photo", "Video", "Archive", "GIF", "Folder"], state="readonly")
file_type_menu.pack(pady=5, padx=20, fill="x")

# Rename settings
separator2 = tk.Frame(root, height=2, bg="#99AAB5")
separator2.pack(fill="x", padx=20, pady=5)

frame_settings = tk.Frame(root, bg="#2C2F33")
frame_settings.pack(pady=10, fill="x", padx=20)

# Custom name
custom_name_label = tk.Label(frame_settings, text="Custom Name:", bg="#2C2F33", fg="#FFFFFF")
custom_name_label.grid(row=0, column=0, padx=5, pady=5, sticky="w")
custom_name_entry = tk.Entry(frame_settings, textvariable=custom_name_var, width=25, relief="flat", highlightthickness=1, highlightbackground="#7289DA", highlightcolor="#7289DA")
custom_name_entry.grid(row=0, column=1, padx=5, pady=5)

# Prefix
prefix_label = tk.Label(frame_settings, text="Prefix:", bg="#2C2F33", fg="#FFFFFF")
prefix_label.grid(row=1, column=0, padx=5, pady=5, sticky="w")
prefix_menu = tk.Entry(frame_settings, textvariable=prefix_var, width=25, relief="flat", highlightthickness=1, highlightbackground="#7289DA", highlightcolor="#7289DA")
prefix_menu.grid(row=1, column=1, padx=5, pady=5)

prefix_hint_label = tk.Label(frame_settings, text="SC, LSC, VSC, NSC, mixSC", bg="#2C2F33", fg="#99AAB5", font=("Arial", 10))
prefix_hint_label.grid(row=1, column=2, padx=5, pady=5, sticky="w")

# Sensitivity
sensitivity_label = tk.Label(frame_settings, text="Sensitivity:", bg="#2C2F33", fg="#FFFFFF")
sensitivity_label.grid(row=2, column=0, padx=5, pady=5, sticky="w")
sensitivity_menu = tk.Entry(frame_settings, textvariable=sensitivity_var, width=25, relief="flat", highlightthickness=1, highlightbackground="#7289DA", highlightcolor="#7289DA")
sensitivity_menu.grid(row=2, column=1, padx=5, pady=5)

# Pieces
pieces_label = tk.Label(frame_settings, text="Pieces:", bg="#2C2F33", fg="#FFFFFF")
pieces_label.grid(row=3, column=0, padx=5, pady=5, sticky="w")
pieces_entry = tk.Entry(frame_settings, textvariable=pieces_var, width=25, relief="flat", highlightthickness=1, highlightbackground="#7289DA", highlightcolor="#7289DA")
pieces_entry.grid(row=3, column=1, padx=5, pady=5)

# Rename button
separator3 = tk.Frame(root, height=2, bg="#99AAB5")
separator3.pack(fill="x", padx=20, pady=5)

rename_button = tk.Button(root, text="Rename", command=rename_files, bg="#7289DA", fg="#FFFFFF", relief="flat", borderwidth=0, highlightthickness=0)
rename_button.pack(pady=20, padx=20, fill="x")

root.mainloop()

//*

Корректировка: Финальная версия

*//

import os
import tkinter as tk
from tkinter import ttk, filedialog, messagebox
from datetime import datetime

def browse_folder():
    folder_path.set(filedialog.askdirectory(title="Select Folder"))

def browse_file():
    folder_path.set(filedialog.askopenfilename(title="Select File"))

def rename_files():
    path = folder_path.get()
    if not os.path.exists(path):
        messagebox.showerror("Error", "The specified path does not exist")
        return

    # Collect data
    file_type = file_type_var.get()
    custom_name = custom_name_var.get()
    prefix = prefix_var.get()
    sensitivity = sensitivity_var.get()
    pieces = pieces_var.get()
    keep_original = keep_original_var.get()
    date = datetime.now().strftime("%d%m%y")

    try:
        files = []
        if os.path.isdir(path):
            files = os.listdir(path)
        else:
            files = [os.path.basename(path)]
            path = os.path.dirname(path)

        # Filter by type
        extensions = {
            "Photo": ["jpeg", "jpg", "png"],
            "Video": ["mp4", "mov", "avi"],
            "Archive": ["zip", "rar", "7z"],
            "GIF": ["gif"],
            "Folder": []
        }.get(file_type, [])

        if extensions:
            files = [f for f in files if f.split('.')[-1].lower() in extensions]

        # Rename files
        for index, file in enumerate(files, start=1):
            ext = file.split('.')[-1]
            if file_type == "Folder" and not os.path.isdir(os.path.join(path, file)):
                continue

            part_index = f"_p{index}"
            base_name = f"{custom_name}_{prefix}_{sensitivity}{part_index}_{pieces}p_{date}.{ext}".strip('_')
            if keep_original:
                base_name = f"{file.rsplit('.', 1)[0]}_{base_name}".strip('_')

            os.rename(os.path.join(path, file), os.path.join(path, base_name))

        messagebox.showinfo("Success", f"File renaming completed ({len(files)} files)")
    except Exception as e:
        messagebox.showerror("Error", str(e))

# Create window
root = tk.Tk()
root.title("File Renamer")
root.geometry("900x600")
root.configure(bg="#314448")

folder_path = tk.StringVar()
custom_name_var = tk.StringVar(value="MyFile")
prefix_var = tk.StringVar(value="")
sensitivity_var = tk.StringVar(value="")
pieces_var = tk.StringVar(value="")
file_type_var = tk.StringVar(value="All")
keep_original_var = tk.BooleanVar()

# Title
title_label = tk.Label(root, text="File Renamer", bg="#314448", fg="#c7d3bf", font=("Consolas", 16))
title_label.pack(pady=10, anchor="w", padx=20)

# Path selection
frame_path = tk.Frame(root, bg="#314448")
frame_path.pack(pady=10, fill="x", padx=20)

tk.Entry(frame_path, textvariable=folder_path, width=40, relief="flat", highlightthickness=1, highlightbackground="#536d6c", highlightcolor="#536d6c").pack(side="left", padx=5, ipady=5)

tk.Button(frame_path, text="Browse", command=browse_folder, bg="#536d6c", fg="#c7d3bf", relief="flat", borderwidth=0, highlightthickness=0).pack(side="left", padx=5)

# File type selection
separator1 = tk.Frame(root, height=2, bg="#99AAB5")
separator1.pack(fill="x", padx=20, pady=5)

file_type_label = tk.Label(root, text="File Type", bg="#314448", fg="#c7d3bf", font=("Consolas", 16))
file_type_label.pack(pady=5, anchor="w", padx=20)

file_type_menu = ttk.Combobox(root, textvariable=file_type_var, values=["All", "Photo", "Video", "Archive", "GIF", "Folder"], state="readonly")
file_type_menu.pack(pady=5, padx=20, fill="x")

# Rename settings
separator2 = tk.Frame(root, height=2, bg="#99AAB5")
separator2.pack(fill="x", padx=20, pady=5)

frame_settings = tk.Frame(root, bg="#314448")
frame_settings.pack(pady=10, fill="x", padx=20)

# Custom name
custom_name_label = tk.Label(frame_settings, text="Custom Name:", bg="#314448", fg="#c7d3bf", font=("Consolas", 13))
custom_name_label.grid(row=0, column=0, padx=5, pady=5, sticky="w")
custom_name_entry = tk.Entry(frame_settings, textvariable=custom_name_var, width=25, relief="flat", highlightthickness=1, highlightbackground="#536d6c", highlightcolor="#536d6c")
custom_name_entry.grid(row=0, column=1, padx=5, pady=5)

custom_name_label = tk.Label(frame_settings, text="[CustomName_Prefix_Sensitivity_p1_Piece_Date]", bg="#314448", fg="#99AAB5", font=("Consolas", 10))
custom_name_label.grid(row=0, column=2, padx=5, pady=5, sticky="w")

# Prefix
prefix_label = tk.Label(frame_settings, text="Prefix:", bg="#314448", fg="#c7d3bf", font=("Consolas", 13))
prefix_label.grid(row=1, column=0, padx=5, pady=5, sticky="w")
prefix_menu = tk.Entry(frame_settings, textvariable=prefix_var, width=25, relief="flat", highlightthickness=1, highlightbackground="#536d6c", highlightcolor="#536d6c")
prefix_menu.grid(row=1, column=1, padx=5, pady=5)

prefix_hint_label = tk.Label(frame_settings, text="SS, mangaSS, photo, video, archive, mix", bg="#314448", fg="#99AAB5", font=("Consolas", 10))
prefix_hint_label.grid(row=1, column=2, padx=5, pady=5, sticky="w")

# Sensitivity
sensitivity_label = tk.Label(frame_settings, text="Sensitivity:", bg="#314448", fg="#c7d3bf", font=("Consolas", 13))
sensitivity_label.grid(row=2, column=0, padx=5, pady=5, sticky="w")
sensitivity_menu = tk.Entry(frame_settings, textvariable=sensitivity_var, width=25, relief="flat", highlightthickness=1, highlightbackground="#536d6c", highlightcolor="#536d6c")
sensitivity_menu.grid(row=2, column=1, padx=5, pady=5)

# Sensitivity Hint
sensitivity_hint_label = tk.Label(frame_settings, text="NSC, SC, LSC, SC, VSC, mixSC", bg="#314448", fg="#99AAB5", font=("Consolas", 10))
sensitivity_hint_label.grid(row=2, column=2, padx=5, pady=5, sticky="w")


# Pieces
pieces_label = tk.Label(frame_settings, text="Pieces:", bg="#314448", fg="#c7d3bf", font=("Consolas", 13))
pieces_label.grid(row=3, column=0, padx=5, pady=5, sticky="w")
pieces_entry = tk.Entry(frame_settings, textvariable=pieces_var, width=25, relief="flat", highlightthickness=1, highlightbackground="#536d6c", highlightcolor="#536d6c")
pieces_entry.grid(row=3, column=1, padx=5, pady=5)

pieces_hint_label = tk.Label(frame_settings, text="1p, 50p, 100p", bg="#314448", fg="#99AAB5", font=("Consolas", 10))
pieces_hint_label.grid(row=3, column=2, padx=5, pady=5, sticky="w")

# Rename button
separator3 = tk.Frame(root, height=2, bg="#99AAB5")
separator3.pack(fill="x", padx=20, pady=5)

rename_button = tk.Button(root, text="Rename", command=rename_files, bg="#536d6c", fg="#c7d3bf", relief="flat", borderwidth=0, highlightthickness=0, font=("Consolas", 20))
rename_button.pack(pady=20, padx=20, fill="x")

root.mainloop()


//*

Понял! Вот шаги, как использовать программу для переименования файлов:

### Как использовать программу для переименования файлов

1. **Запуск программы:**
   - Запустите программу, дважды щёлкнув на файл Python с кодом или запустив его через IDE (например, PyCharm или VS Code).

2. **Выбор папки или файла:**
   - В верхней части окна есть поле для выбора папки.
   - Нажмите кнопку **Browse**, чтобы выбрать папку, содержащую файлы, которые вы хотите переименовать. Вы также можете выбрать файл, если хотите переименовать только его.

3. **Выбор типа файлов:**
   - В выпадающем меню **File Type** выберите тип файлов, которые хотите переименовать:
     - **All** — все файлы.
     - **Photo** — изображения (например, .jpg, .png).
     - **Video** — видеофайлы (например, .mp4, .mov).
     - **Archive** — архивы (например, .zip, .rar).
     - **GIF** — файлы в формате GIF.
     - **Folder** — папки.
   - Если хотите переименовать все файлы в папке, выберите **All**.

4. **Настройка переименования:**
   - **Custom Name**: Введите базовое имя для файлов (например, `MyFile`).
   - **Prefix**: Введите префикс, который будет добавлен в начало имени (например, `photo`, `video`).
   - **Sensitivity**: Введите чувствительность, которая будет добавлена (например, `NSC`, `SC`).
   - **Pieces**: Укажите количество частей в имени файла (например, `1p`, `50p`).

5. **Опция сохранения оригинальных имен:**
   - Если хотите оставить оригинальное имя файла в новом названии, активируйте опцию **Keep Original**. Это добавит оригинальное имя перед переименованным.

6. **Запуск переименования:**
   - После того как все параметры настроены, нажмите кнопку **Rename**.
   - Программа начнёт переименовывать все файлы в выбранной папке согласно указанным настройкам.
   - Когда переименование завершится, появится сообщение об успешном завершении.

### Пример:
Допустим, у вас есть папка с изображениями, и вы хотите их переименовать:
- В поле **Custom Name** введёте `MyPhoto`.
- В **Prefix** напишете `img`.
- В **Sensitivity** — `NSC`.
- В **Pieces** — `1p`.
- В **File Type** выберите **Photo**.

После нажатия кнопки **Rename** программа переименует все изображения в папке, добавив к их имени ваше настраиваемое имя и другие параметры. Например, файл `image.jpg` станет `MyPhoto_img_NSC_p1_1p_311224.jpg`.

### Советы:
- Убедитесь, что в выбранной папке есть файлы, подходящие под выбранный тип. Например, если выбрали **Video**, убедитесь, что в папке есть видеофайлы.
- Можно переименовывать только один файл или все файлы в папке.

### Заключение:
Это удобное и простое приложение для массового переименования файлов с возможностью настройки имени и структуры.